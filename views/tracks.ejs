<!DOCTYPE html>
<html>
    <head>
        <%- include('partials/head.ejs') -%>
    </head>
    <body>
        <div class="container">
            <style type="text/css">
             table {
                 table-layout: fixed;
                 word-wrap: break-word;
             }

             table th, table td {
                 overflow: hidden;
             }
            </style>

            <div class="row">
                <div class="col-10">
                    <table id="track-table" class="table table-striped table-sm table-responsive">
                    </table>
                </div>
                <div class="col-2">
                    <table id="hidden-col-table" class="table table-striped table-sm table-reponsive">
                    </table>
                </div>
            </div>
            <div class="row">
                <div class="col-10">
                    <div id="histogram">
                    </div>
                </div>
            </div>
        </div>
        <script>
         var trackTable = document.getElementById("track-table");
         var hiddenColTable = document.getElementById("hidden-col-table");
         var tracks = <%- JSON.stringify(tracks) %>;
         var fields = Object.keys(tracks[0]);
         var hiddenFields = [];
         function humanify(str) {
             // replace _ -> space and capitalize words
             var words = str.replaceAll('_', ' ').split(' ');
             words = words.map(word => word.charAt(0).toUpperCase() + word.substr(1));
             return words.join(' ');
         }
         
         function toggleField(f) {
             var idx = fields.indexOf(f);
             if (idx < 0) return;
             var elems = trackTable.querySelectorAll("td:nth-child(" +
                                                         (idx + 1) + ")");
             var hfIdx = hiddenFields.indexOf(f);
             var isHidden = (hfIdx >= 0);
             if (isHidden) {
                 // hide the field
                 hiddenFields.splice(hfIdx, 1);
             }
             else {
                 hiddenFields.push(f);
             }
             elems.forEach(e => {
                 e.style.display = (isHidden ? "table-cell" : "none");
             });
             var row = document.getElementById("hidden-field-" + f);
             row.style.display = (isHidden ? "none" : "table-row");
         }
         
         function buildTrackTable () {
             var cellWidth = Math.max(5, 100 / (fields.length - hiddenFields.length)) + "%"
             // header row
             var header = trackTable.createTHead();
             var row = header.insertRow(0);
             fields.forEach(f => {
                 var cell = row.insertCell(-1);
                 cell.innerText = humanify(f);
                 cell.style.width = cellWidth
                 var hideBtn = document.createElement("btn");
                 hideBtn.className = "btn btn-block btn-outline-secondary";
                 hideBtn.onclick = () => toggleField(f);
                 hideBtn.innerText = "Hide";
                 cell.appendChild(hideBtn);
             });
             // table data
             tracks.forEach(track => {
                 var row = trackTable.insertRow(-1);
                 fields.forEach(f => {
                     var cell = row.insertCell(-1);
                     cell.innerText = track[f];                     
                 });      
             });
         }
         
         function buildHiddenColTable() {
             var header = hiddenColTable.createTHead();
             var row = header.insertRow(0);
             var cell = row.insertCell(0);
             cell.innerText = "Click to show hidden field:";
             fields.forEach(f => {
                 row = hiddenColTable.insertRow(-1);
                 cell = row.insertCell(0);
                 cell.id = "hidden-field-" + f;
                 var showBtn = document.createElement("btn");
                 showBtn.className = "btn btn-block btn-outline-secondary";
                 showBtn.onclick = () => toggleField(f);
                 showBtn.innerText = humanify(f);
                 cell.appendChild(showBtn);
                 if (hiddenFields.indexOf(f) == -1) {
                     cell.style.display = "none";
                 }
             });
         }
         
         window.onload = () => {
             buildTrackTable();
             buildHiddenColTable();
             var initHiddenFields = ["available_markets", "disc_number", "duration_ms", "episode", "external_ids", "external_urls", "href", "id", "is_local", "preview_url", "track", "track_number", "type", "uri"];
             initHiddenFields.forEach(f => toggleField(f));
         };
        </script>
        <script src="https://d3js.org/d3.v4.js"></script>
        <script>
         var curField = "popularity";
         var numBins = 10;
         var margin = {top: 10, bottom: 50, left: 30, right: 30},
             height = 500,
             width = 500;
         var svg = d3.select("#histogram")
                     .append("svg")
                     .attr("width", width + margin.left + margin.right)
                     .attr("height", height + margin.top + margin.bottom)
                     .append("g")
                     .attr("transform",
                           "translate(" + margin.left + "," + margin.top + ")");
         var x = d3.scaleLinear()
                   .domain([0, d3.max(tracks, t=> +t[curField])])
                   .range([0, width])
         svg.append("g")
                   .attr("transform", "translate(0, " + height + ")")
                   .call(d3.axisBottom(x))

         var histogram = d3.histogram()
                           .value(t => t[curField])
                           .domain(x.domain())
                           .thresholds(x.ticks(numBins));
         var bins = histogram(tracks);
         var y = d3.scaleLinear()
                   .range([height, 0])
                   .domain([0, d3.max(bins, d => d.length)]);
         svg.append("g")
            .call(d3.axisLeft(y));
         svg.selectAll("rect")
            .data(bins)
            .enter()
            .append("rect")
            .attr("x", 1)
            .attr("transform", d => "translate(" + x(d.x0) + "," + y(d.length) + ")")
            .attr("width", d => x(d.x1) - x(d.x0) - 1)
            .attr("height", d => height - y(d.length))
            .style("fill", "#1111EE");
        </script>
            
        <%- include('partials/foot.ejs') -%>
    </body>
</html>
