<!DOCTYPE html>
<html>
    <head>
        <%- include('partials/head.ejs') -%>
    </head>
    <body>
        <div id="root">
            <div class="jumbotron">
                <h2>Statistics for playlist <%= playlist.name %></h2>
                <div class="row align-items-center">
                    <div class="col-3">
                        <img src="<%= playlist.images[0].url %>" height="100%" width="80%">
                    </div>
                    <div class="col-6">
                        <table class="table-sm">
                            <tr><td>Tracks:</td> <td><%= playlist.tracks.total %></td></tr>
                            <tr><td>Followers:</td><td><%= playlist.followers.total %></td></tr>
                            <tr><td>Collaborative:</td><td><%= playlist.collaborative %></td></tr>
                            <tr><td>Public:</td><td><%= playlist.public %></td></tr>
                        </table>
                    </div>
                    
                </div>
            </div>
        </div>
        <script src="https://d3js.org/d3.v4.js"></script>
        <script>
         // TODO: DRY this
         function toHMSstring(ms) {
             const hrs = Math.floor(ms / 3600000);
             const mins = Math.floor(ms / 60000) % 60;
             const secs = Math.floor(ms / 1000) % 60;
             var res = "";
             if (hrs > 0) {
                 res += hrs + ":";
             }
             if (hrs > 0 && mins < 10) {
                 res += "0" + mins + ":"
             }
             else {
                 res += mins + ":";
             }
             if (secs < 10) {
                 res += "0" + secs;
             }
             else {
                 res += secs;
             }
             return res;
         }
        </script>
        <script>
         var tracks = <%- JSON.stringify(tracks) %>;
         function createHistogram(div, data, toLabel, height, width) {
             /*
                params:
                div: a div to hold the histogram. should id, offsetWidth and offsetHeight defined
                data: an array of numbers
                toLabel: a function from numbers to labels for tick marks
                height, width: in px

                returns: a div containing the histogram
              */
             
             var numBins = Math.max(5, data.length / 10);
             var numTicks = Math.min(5, numBins);
             var binColor = "#5500FF"
             var margin = {top: 10, bottom: 50, left: 30, right: 30};
             
             var svg = d3.select("#" + div.id)
                         .append("svg")
                         .attr("width", width + margin.left + margin.right)
                         .attr("height", height + margin.top + margin.bottom)
                         .append("g")
                         .attr("transform",
                               "translate(" + margin.left + "," + margin.top + ")");
             var x = d3.scaleLinear()
                       .domain(d3.extent(data))
                       .nice(numBins)
                       .range([0, width])

             var xAxis = d3.axisBottom(x)
                           .scale(x)
                           .ticks(numTicks)
                           .tickFormat((d, i) => toLabel(d));
             svg.append("g")
                .attr("transform", "translate(0, " + height + ")")
                .call(xAxis)
             var histogram = d3.histogram()
                               .value(d => d)
                               .domain(x.domain())
                               .thresholds(x.ticks(numBins))
             var bins = histogram(data);
             var y = d3.scaleLinear()
                       .range([height, 0])
                       .domain([0, d3.max(bins, d => d.length)]);
             svg.append("g")
                .call(d3.axisLeft(y));
             svg.selectAll("rect")
                .data(bins)
                .enter()
                .append("rect")
                .attr("x", 1)
                .attr("transform", d => "translate(" + x(d.x0) + "," + y(d.length) + ")")
                .attr("width", d => x(d.x1) - x(d.x0) - 1)
                .attr("height", d => height - y(d.length))
                .style("fill", binColor);
         }

         function oneVarSummary(data, toLabel) {
             var sum = 0;
             var count = data.length;
             data.forEach(d => {
                 sum += d;
             });
             var mean = sum / count;
             var std_dev = 0;
             data.forEach(d => {
                 std_dev += Math.pow((mean - d), 2);
             });
             std_dev = Math.sqrt(std_dev / count);
             var sorted = [...data].sort((a, b) => a - b);
             var median = (count % 2 == 0) ?
                          (data[count/2] + data[count/2 - 1]) / 2 :
                          data[Math.floor(count/2)];
             return {
                 count,
                 mean,
                 median,
                 std_dev
             }
         }
         
         window.onload = () => {
             var root = document.getElementById("root");
             var mdy_fmt = d3.timeFormat("%m/%d/%y")
             var histograms = [
                 {
                     id: "popularity",
                     data: tracks.map(x => x.popularity),
                     toLabel: x => x
                 },
                 {
                     id: "release_date",
                     data: tracks.map(x => Date.parse(x.release_date)),
                     toLabel: d =>(new Date(d)).getFullYear()
                 },
                 {
                     id: "added_at",
                     data: tracks.map(x => Date.parse(x.added_at)),
                     toLabel: d => mdy_fmt(new Date(d))
                 },
                 {
                     id: "duration",
                     data: tracks.map(x => x.duration_ms),
                     toLabel: d => toHMSstring(d) 
                 }
             ];
             var row;
             for (var i = 0; i < histograms.length; i++) {
                 if (i % 3 == 0) {
                     row = document.createElement("div");
                     row.className = "row justify-content-around";
                     root.appendChild(row);
                 }
                 var col = document.createElement("div");
                 col.className = "col-4";
                 row.appendChild(col);
                 var { id, data, toLabel } = histograms[i];
                 var titleElem = document.createElement("h3");
                 titleElem.id = id + "-histogram-title";
                 titleElem.innerText = "Track " + humanify(id);
                 col.appendChild(titleElem);
                 var histDiv = document.createElement("div");
                 histDiv.id = id + "-histogram";
                 col.appendChild(histDiv);
                 createHistogram(histDiv, data, toLabel, histDiv.offsetWidth, histDiv.offsetWidth);
                 var substats = document.createElement("p");
                 var summary = oneVarSummary(data, toLabel);
                 delete summary.count;
                 summary.mean = toLabel(summary.mean);
                 summary.median = toLabel(summary.median);
                 if (id == "added_at" || id == "release_date") {
                     summary.std_dev = summary.std_dev / (1000 * 60 * 60 * 24) + " days";
                 }
                 else {
                     summary.std_dev = toLabel(summary.std_dev)
                 }
                 substats.innerText = Object.entries(summary).map(([k, v]) => humanify(k) + ": " + v).join("\n");
                 col.appendChild(substats);
             }
         };
        </script>
        <%- include('partials/foot.ejs') -%>
    </body>
</html>